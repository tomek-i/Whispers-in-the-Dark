import { cva, type VariantProps } from "class-variance-authority";
import { clsx } from "clsx";
import React, { forwardRef } from "react";
import { twMerge } from "tailwind-merge";
import { {{pascalCase name}}Variants } from "./{{pascalCase name}}.variants";


type {{pascalCase name}}Props = { disabled?:boolean } & 
    React.HTMLAttributes<HTMLDivElement> &
    VariantProps<typeof {{pascalCase name}}Variants>;


export const {{pascalCase name}} = forwardRef<HTMLDivElement, {{pascalCase name}}Props>(
  (
    {
      className = "",
      size = "default",
      variant = "default",
      disabled = false,
      ...props
    },
    ref
  )  {
    // override the variant if it is disabled
    variant = disabled ? "disabled" : variant;

    return (
      <div
        ref={ref}
        className={twMerge(clsx({{pascalCase name}}Variants({ variant, size, className })))}
        {...props}
      />
    );
  }
);
